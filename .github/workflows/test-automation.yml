name: Java CI with Gradle - Test Automation

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write  # 테스트 결과 보고서를 위한 권한
    
    strategy:
      matrix:
        resolution: 
          - "1920x1080x24"   # Full HD - 가장 일반적인 해상도
          - "1280x720x24"    # HD - 최소 요구사항
          - "1024x768x24"    # XGA - 구형 모니터 지원
          - "800x600x24"     # SVGA - 저해상도 호환성
        include:
          - resolution: "1920x1080x24"
            display_name: "Full HD (1920×1080)"
            category: "1920×1080"
          - resolution: "1280x720x24"
            display_name: "HD (1280×720)"
            category: "1280×720"
          - resolution: "1024x768x24"
            display_name: "XGA (1024×768)"
            category: "1024×768"
          - resolution: "800x600x24"
            display_name: "SVGA (800×600)"
            category: "800×600"
      fail-fast: false  # 한 해상도 실패해도 다른 해상도 계속 테스트

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    # gradlew 실행 권한 부여 (Ubuntu 환경에서 필요)
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      if: runner.os != 'Windows'

    # GUI 테스트를 위한 가상 디스플레이 설정 (Xvfb) - 최적화된 설정
    - name: Setup Virtual Display for GUI Tests (${{ matrix.display_name }})
      run: |
        # 필수 패키지만 빠르게 설치
        sudo apt-get update -qq > /dev/null
        sudo apt-get install -y xvfb libxrender1 libxtst6 > /dev/null
        
        # 매트릭스에서 지정된 해상도로 가상 디스플레이 시작
        export DISPLAY=:99.0
        echo "🖥️ Starting virtual display: ${{ matrix.resolution }}"
        Xvfb :99 -ac -screen 0 ${{ matrix.resolution }} -nolisten tcp > /dev/null 2>&1 &
        sleep 2  # 대기 시간 단축 (5초 → 2초)
        echo "DISPLAY=:99.0" >> $GITHUB_ENV
        echo "RESOLUTION=${{ matrix.resolution }}" >> $GITHUB_ENV
        echo "DISPLAY_CATEGORY=${{ matrix.category }}" >> $GITHUB_ENV
        
        # 디스플레이 정상 작동 및 해상도 확인
        echo "🔍 Verifying virtual display setup..."
        ps aux | grep Xvfb | grep -v grep || echo "Xvfb process check"
        if command -v xdpyinfo &> /dev/null; then
          xdpyinfo -display :99.0 | grep dimensions | head -1 || echo "Display info check completed"
        else
          echo "xdpyinfo not available, skipping display verification"
        fi
        echo "✅ ${{ matrix.display_name }} virtual display ready"

    # 캐시를 사용하여 빌드 시간 단축
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # 컴파일 확인 - 최적화된 설정
    - name: Compile Java code (${{ matrix.display_name }})
      run: |
        echo "🔨 Compiling for ${{ matrix.display_name }}..."
        ./gradlew compileJava compileTestJava --no-daemon --quiet
      continue-on-error: false
      env:
        DISPLAY: :99.0
        RESOLUTION: ${{ matrix.resolution }}

    # 테스트 실행 (JUnit 5 기반) - 가상 디스플레이 환경에서
    - name: Run JUnit Tests (${{ matrix.display_name }})
      timeout-minutes: 5  # 타임아웃 단축 (10분 → 5분)
      run: |
        echo "🧪 Running JUnit tests with ${{ matrix.display_name }}..."
        # 빠른 테스트 실행 (상세 로그 제거)
        timeout 4m ./gradlew test --no-daemon --quiet --continue || echo "Tests completed"
      continue-on-error: true
      env:
        DISPLAY: :99.0
        JAVA_OPTS: "-Djava.awt.headless=false -Dtest.resolution=${{ matrix.resolution }}"

    # 커스텀 테스트 실행 (BasicTest.java) - 최적화된 실행
    - name: Run BasicTest
      timeout-minutes: 2  # 타임아웃 단축 (3분 → 2분)
      run: |
        echo "🎮 Running BasicTest..."
        if [ -f "build/classes/java/test/tetris/BasicTest.class" ]; then
          timeout 90s java -cp "build/classes/java/main:build/classes/java/test" tetris.BasicTest > /dev/null 2>&1 || echo "BasicTest completed"
        else
          echo "BasicTest.class not found, skipping..."
        fi
      continue-on-error: true
      env:
        DISPLAY: :99.0

    # 커스텀 테스트 실행 (GameScreenTest.java) - 최적화된 실행
    - name: Run GameScreenTest
      timeout-minutes: 2  # 타임아웃 단축 (3분 → 2분)
      run: |
        echo "🖥️ Running GameScreenTest..."
        if [ -f "build/classes/java/test/tetris/GameScreenTest.class" ]; then
          timeout 90s java -cp "build/classes/java/main:build/classes/java/test" tetris.GameScreenTest > /dev/null 2>&1 || echo "GameScreenTest completed"
        else
          echo "GameScreenTest.class not found, skipping..."
        fi
      continue-on-error: true
      env:
        DISPLAY: :99.0
        JAVA_OPTS: "-Djava.awt.headless=false"

    # 테스트 결과 보고서 생성 (테스트가 실행된 경우에만)
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always() && hashFiles('build/test-results/test/*.xml') != '' && github.event_name != 'pull_request'
      with:
        name: 'Test Results (${{ matrix.category }})'
        path: 'build/test-results/test/*.xml'
        reporter: 'java-junit'
        fail-on-error: false

    # 테스트 커버리지 리포트 (PR에서만 실행)
    - name: Generate Test Coverage Report
      if: github.event_name == 'pull_request'
      run: ./gradlew jacocoTestReport --quiet
      continue-on-error: true
      env:
        DISPLAY: :99.0

    # 빌드 아티팩트 저장 (main 브랜치에서만 실행)
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      if: success() && github.ref == 'refs/heads/main' && hashFiles('build/libs/*.jar') != ''
      with:
        name: tetris-jar-${{ matrix.category }}
        path: build/libs/*.jar

    # 테스트 실패 시 로그 업로드 - 실제 로그가 존재할 때만
    - name: Upload test logs on failure
      uses: actions/upload-artifact@v4
      if: failure() && (hashFiles('build/reports/tests/test/**/*') != '' || hashFiles('build/test-results/test/**/*') != '')
      with:
        name: test-logs-${{ matrix.category }}
        path: |
          build/reports/tests/test/
          build/test-results/test/

  # 정적 코드 분석 (선택사항)
  static-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

    # gradlew 실행 권한 부여
    - name: Make gradlew executable
      run: chmod +x ./gradlew

    # 가상 디스플레이 설정 (정적 분석에도 필요할 수 있음)
    - name: Setup Virtual Display
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y xvfb
        export DISPLAY=:99.0
        Xvfb :99 -ac -screen 0 1920x1080x24 -nolisten tcp &
        sleep 3
        echo "DISPLAY=:99.0" >> $GITHUB_ENV

    # 코드 스타일 검사
    - name: Run checkstyle
      run: |
        if [ -f "config/checkstyle/checkstyle.xml" ]; then
          ./gradlew checkstyleMain checkstyleTest || echo "Checkstyle completed with warnings"
        else
          echo "Checkstyle configuration not found, skipping..."
        fi
      continue-on-error: true
      env:
        DISPLAY: :99.0

    # SpotBugs 정적 분석 (선택사항)
    - name: Run SpotBugs
      run: |
        ./gradlew spotbugsMain spotbugsTest || echo "SpotBugs completed with warnings"
      continue-on-error: true
      env:
        DISPLAY: :99.0