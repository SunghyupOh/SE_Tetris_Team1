plugins {
    id 'application'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.0.7'
}

// Version checking example using Gradle's version comparison
def minimumGradleVersion = "8.0"
def currentGradleVersion = gradle.gradleVersion

// Simple version comparison without importing VersionNumber
if (currentGradleVersion.split('\\.')[0].toInteger() < minimumGradleVersion.split('\\.')[0].toInteger()) {
    throw new GradleException("This project requires Gradle ${minimumGradleVersion} or higher. Current version: ${currentGradleVersion}")
}

println "✓ Gradle version check passed: ${currentGradleVersion}"

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) // 빌드 JDK 고정
    }
}

repositories {
    mavenCentral()
}

application {
    // 메인 클래스 FQCN
    mainClass = 'tetris.Tetris'
}

dependencies {
    
    implementation "javazoom:jlayer:1.0.1"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // 테스트 리포팅을 위한 의존성
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
}

test {
    useJUnitPlatform()
    
    // 테스트 리포트 생성 설정
    reports {
        junitXml.required = true
        html.required = true
    }
    
    // 테스트 결과를 XML 형태로 출력 (GitHub Actions 호환)
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }
    
    // GUI 테스트를 위한 헤드리스 모드 설정 (CI 환경에서만)
    if (System.getenv("CI") == "true") {
        systemProperty 'java.awt.headless', 'true'
    }
    
    // 테스트 타임아웃 설정 - 강화
    timeout = Duration.ofMinutes(8)  // 전체 테스트 타임아웃을 8분으로 단축
    
    // JVM 옵션 추가 - 무한 루프 방지
    jvmArgs '-XX:+UseG1GC', '-Xmx2g', '-XX:+HeapDumpOnOutOfMemoryError'
    
    // 개별 테스트 메서드 타임아웃
    systemProperty 'junit.jupiter.execution.timeout.default', '5m'
    systemProperty 'junit.jupiter.execution.timeout.mode', 'enabled'
    
    // 테스트 실패 시에도 계속 진행
    ignoreFailures = false
    
    // 문제있는 테스트 제외 (필요시)
    exclude '**/*LongRunning*'
}

// 테스트 커버리지 설정
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                // 메인 클래스나 UI 클래스 제외 (선택사항)
                '**/Tetris.class',
                '**/Main.class'
            ])
        }))
    }
}

// JAR 파일 생성 설정
jar {
    manifest {
        attributes 'Main-Class': 'tetris.Tetris'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


// ===== exe 빌드 관련 =====

// --- dist 정리: Delete 타입으로 깔끔하게 ---
tasks.register('cleanDist', Delete) {
    delete layout.projectDirectory.dir('dist')
}

// --- jpackage : app-image ---
tasks.register('jpackageExe', Exec) {
    dependsOn 'cleanDist', 'jar'
    group = 'distribution'
    description = 'Creates a native application image'

    def jp = "${System.getProperty('java.home')}/bin/jpackage.exe"
    commandLine jp,
        '--input', 'build/libs',
        '--main-jar', jar.archiveFileName.get(),
        '--main-class', 'tetris.Tetris',
        '--name', 'Tetris Game',
        '--type', 'app-image',
        '--dest', 'dist'
        //'--icon', 'icon.ico'        // ★ Windows는 .ico 사용
        //,'--win-console'           // 콘솔창 필요하면 주석 해제
}

// Checkstyle 설정
checkstyle {
    toolVersion = '10.12.4'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true  // 빌드 실패를 방지하고 경고로만 처리
}

// SpotBugs 설정
spotbugs {
    ignoreFailures = true  // 빌드 실패를 방지하고 경고로만 처리
    reportLevel = 'medium'
    effort = 'default'
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
    }
}

spotbugsTest {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
        }
    }
}
